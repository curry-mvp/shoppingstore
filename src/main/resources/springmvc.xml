<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"               xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

    <!--组建扫描类路径-->
    <context:component-scan base-package="controller,serviceimpl"/>
    <!-- 启动AspectJ自动代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!--对静态资源不进行处理，例如js,css,jpg等等 -->
    <mvc:default-servlet-handler />
    <!--开启注解驱动-->
    <mvc:annotation-driven />
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          id="internalResourceViewResolver">
        <!-- 前缀 -->
        <property name="prefix" value="/WEB-INF/jsp/" />
        <!-- 后缀 -->
        <property name="suffix" value=".jsp" />
    </bean>
    <!--<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
            <property name="defaultErrorView" value="error"/>
            <property name="exceptionAttribute" value="ex"/>
            <property name="exceptionMappings">
                    <props>
                            <prop key="exception.MyException"> /error </prop>

                    </props>
                    &lt;!&ndash; 还可以定义其他的自定义异常 &ndash;&gt;
            </property>
    </bean>-->

    <!--<mvc:interceptors>

            <mvc:interceptor>
                    &lt;!&ndash;/*表示拦截所有请求,如果想拦截以某个名字(abc)结尾的请求path里写/*/abc,如果想拦截以某个名字(abc)开头的请求,path里写/abc/* &ndash;&gt;
                    <mvc:mapping path="/*" />
                    &lt;!&ndash; 排除拦截的地址 &ndash;&gt;
                    &lt;!&ndash;  <mvc:exclude-mapping path="/*/login"/> 不拦截login结尾的请求 &ndash;&gt;
                    <bean id="commonInterceptor" class="interceptor.MyInterceptor "></bean> &lt;!&ndash;这个类就是我们自定义的Interceptor &ndash;&gt;
            </mvc:interceptor>
            &lt;!&ndash; 当设置多个拦截器时，先按顺序调用preHandle方法，然后逆序调用每个拦截器的postHandle和afterCompletion方法  &ndash;&gt;

    </mvc:interceptors>
    -->

    <mvc:interceptors>
            <mvc:interceptor>
                    <!--&lt;!&ndash;/*表示拦截所有请求,如果想拦截以某个名字(abc)结尾的请求path里写/*/abc,如果想拦截以某个名字(abc)开头的请求,path里写/abc/* &ndash;&gt;-->
                    <mvc:mapping path="/selectAllP_type" />
                    <!--&lt;!&ndash; 排除拦截的地址 &ndash;&gt;-->
                    <!--&lt;!&ndash;  <mvc:exclude-mapping path="/*/login"/> 不拦截login结尾的请求 &ndash;&gt;-->
                    <bean id="commonInterceptor2" class="interceptor.MyInterception "></bean>
                <!--&lt;!&ndash;这个类就是我们自定义的Interceptor &ndash;&gt;-->
            </mvc:interceptor>

    </mvc:interceptors>

    <!--<mvc:resources location="/WEB-INF/resource/"  mapping="/resource/**"  />-->

    <bean id="myAs" class="aspect.OrderAspect"></bean>

 <!--&lt;!&ndash;aop:config标签用来配置有关切面的配置  &ndash;&gt;-->
    <aop:config>
        <!--&lt;!&ndash; 设置切点表达式 以便下面引用 &ndash;&gt;-->
        <aop:pointcut expression="execution(* controller.ShopCarController.deleteProductNum(..))" id="cut"/>
        <!--&lt;!&ndash; 配置切面所用的bean 和优先级 &ndash;&gt;-->
        <aop:aspect ref="myAs" order="1" >
            <!--&lt;!&ndash; 配置切面方法 &ndash;&gt;-->
            <aop:before method="beforeCheck" pointcut-ref="cut"/>
            <aop:after method="afterCheck"  pointcut-ref="cut"/>
            <aop:after-returning method="afterReturn" pointcut-ref="cut" returning="res"/>
            <aop:after-throwing method="afterThrow" pointcut-ref="cut" throwing="ex"/>
            <aop:around method="around" pointcut-ref="cut"/>
        </aop:aspect>
    </aop:config>

    <bean id="multipartResolver"
          class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 指定所上传文件的总大小,单位字节。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
        <property name="maxUploadSize" value="10240000" />
        <property name="resolveLazily" value="true"/>

    </bean>


</beans>